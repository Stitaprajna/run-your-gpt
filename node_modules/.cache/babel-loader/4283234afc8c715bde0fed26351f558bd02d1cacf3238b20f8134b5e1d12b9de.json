{"ast":null,"code":"var _jsxFileName = \"/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js\";\nimport React, { useState } from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\n\n// Connecting with AI Model\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction response(userInput) {\n  // Accessing the Model through python file\n  const {\n    spawn\n  } = require('child_process');\n  const AIModelOutput = spawn('python', ['my-app/APIExampleChatStream.py', userInput]);\n\n  // AI Model Output\n  AIModelOutput.stdout.on('data', data => {\n    console.log(data);\n  });\n\n  //Error Handling\n  AIModelOutput.stderr.on('data', data => {\n    console.log(data);\n  });\n\n  //Lost Connection with server\n  AIModelOutput.on('data', code => {\n    console.log(`Lost Connection, please try again later!!! ${code}`);\n  });\n}\nfunction f(user_input, messageArray) {\n  const v = 'hello I am mask ' + user_input;\n  messageArray.push(v);\n  console.log(messageArray);\n}\n\n// React-ChatBot-UI\nexport default function ChatbotApp() {\n  // const [myArray, setMyArray] = useState([]);\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2 * message_limit + 1);\n  var messageArray = [];\n  steps[0] = {\n    id: 'Greet',\n    message: 'Hello, Welcome to our platform. How Can I help you?',\n    trigger: String(count)\n  };\n\n  // Caching the steps\n\n  while (count < 2 * message_limit + 1) {\n    var Message = 'Hi ' + '{previousValue}';\n    // var Message = response('{previousValue}');\n\n    steps[count] = {\n      id: String(count),\n      user: true,\n      trigger: String(count + 1)\n    };\n    steps[count + 1] = {\n      id: String(count + 1),\n      message: Message,\n      trigger: String(count + 2)\n    };\n    var step = steps.slice(0, count + 1);\n    // setMyArray( myArray=>[...myArray,0]);\n    // console.log(myArray);\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count += 2;\n    if (count === 2 * message_limit + 1) {\n      steps[count] = {\n        id: String(count),\n        message: 'Thank You for chatting with us. Your conversation has ended.',\n        end: true\n      };\n    }\n    ;\n  }\n  // localStorage.setItem(\"steps\", JSON.stringify(steps));\n  // console.log(steps);\n  // console.log(messageArray);\n  // var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  // console.log(storedUserNames);\n\n  // All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a'\n  };\n\n  // all available config props\n  const config = {\n    width: \"400px\",\n    height: \"500px\",\n    floating: true\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(ChatBot, {\n          headerTitle: \"Speech Recognition\",\n          recognitionEnable: true,\n          headerTitle: \"Speech Synthesis\",\n          speechSynthesis: {\n            enable: true,\n            lang: 'en'\n          },\n          steps: steps,\n          ...config\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = ChatbotApp;\nvar _c;\n$RefreshReg$(_c, \"ChatbotApp\");","map":{"version":3,"names":["React","useState","ChatBot","Segment","ThemeProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","response","userInput","spawn","require","AIModelOutput","stdout","on","data","console","log","stderr","code","f","user_input","messageArray","v","push","ChatbotApp","message_limit","count","steps","Array","id","message","trigger","String","Message","user","step","slice","end","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","config","width","height","floating","children","headerTitle","recognitionEnable","speechSynthesis","enable","lang","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\n\n\n\n// Connecting with AI Model\nfunction response(userInput){\n\n    // Accessing the Model through python file\n    const { spawn } = require('child_process');\n    const AIModelOutput = spawn('python',['my-app/APIExampleChatStream.py',userInput]);\n\n    // AI Model Output\n    AIModelOutput.stdout.on('data',(data) =>{\n\n      console.log(data);\n    });\n\n    //Error Handling\n    AIModelOutput.stderr.on('data', (data) =>{\n      console.log(data);\n    });\n\n    //Lost Connection with server\n    AIModelOutput.on('data', (code) =>{\n      console.log(`Lost Connection, please try again later!!! ${code}`)\n    }); \n\n}\n\nfunction f(user_input,messageArray){\n  const v = 'hello I am mask ' + user_input;\n  messageArray.push(v);\n  console.log(messageArray)\n}\n\n// React-ChatBot-UI\nexport default function ChatbotApp(){\n  // const [myArray, setMyArray] = useState([]);\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2*message_limit+1);\n  var messageArray = []\n\n\n  steps[0] = {\n    id:'Greet',\n    message:'Hello, Welcome to our platform. How Can I help you?',\n    trigger:String(count),\n  }\n\n  // Caching the steps\n\n  while(count<2*message_limit+1){\n    var Message = 'Hi ' + '{previousValue}';\n    // var Message = response('{previousValue}');\n\n    steps[count] = {\n      id:String(count),\n      user:true,\n      trigger:String(count+1),\n    };\n\n    steps[count+1] = {\n      id:String(count+1),\n      message: Message,\n      trigger:String(count+2),\n    };\n\n    var step = steps.slice(0,count+1);\n    // setMyArray( myArray=>[...myArray,0]);\n    // console.log(myArray);\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count +=2;\n\n    if(count===2*message_limit+1){\n      steps[count] = {\n        id:String(count),\n        message:'Thank You for chatting with us. Your conversation has ended.',\n        end:true\n      };\n    };\n  \n  }\n  // localStorage.setItem(\"steps\", JSON.stringify(steps));\n  // console.log(steps);\n  // console.log(messageArray);\n  // var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  // console.log(storedUserNames);\n  \n  \n\n// All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a',\n  };\n\n\n// all available config props\n  const config ={\n    width: \"400px\",\n    height: \"500px\",\n    floating: true,\n  };\n\n  return ( \n  <>\n    <Segment >\n      <ThemeProvider theme={theme}>\n        <ChatBot \n        headerTitle=\"Speech Recognition\"\n        recognitionEnable={true}\n        headerTitle=\"Speech Synthesis\"\n        speechSynthesis={{ enable: true, lang: 'en' }}\n        steps={steps}\n        {...config}\n        />\n      </ThemeProvider>\n    </Segment>\n  </>\n);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}