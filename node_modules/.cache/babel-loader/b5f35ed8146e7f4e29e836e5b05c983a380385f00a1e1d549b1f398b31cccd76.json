{"ast":null,"code":"var _jsxFileName = \"/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js\";\nimport React from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\n\n// Connecting with AI Model\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction response(userInput) {\n  // Accessing the Model through python file\n  const {\n    spawn\n  } = require('child_process');\n  const AIModelOutput = spawn('python', ['my-app/APIExampleChatStream.py', userInput]);\n\n  // AI Model Output\n  AIModelOutput.stdout.on('data', data => {\n    console.log(data);\n  });\n\n  //Error Handling\n  AIModelOutput.stderr.on('data', data => {\n    console.log(data);\n  });\n\n  //Lost Connection with server\n  AIModelOutput.on('data', code => {\n    console.log(`Lost Connection, please try again later!!! ${code}`);\n  });\n}\n\n// React-ChatBot-UI\nexport default function ChatbotApp() {\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2 * message_limit + 1);\n  steps[0] = {\n    id: 'Greet',\n    message: 'Hello, Welcome to our platform. How Can I help you?',\n    trigger: String(count)\n  };\n\n  // Caching the steps\n\n  while (count < 2 * message_limit + 1) {\n    steps[count] = {\n      id: String(count),\n      user: true,\n      trigger: String(count + 1)\n    };\n    steps[count + 1] = {\n      id: String(count + 1),\n      message: 'Hi I am bot ' + '{previousValue}',\n      trigger: String(count + 2)\n    };\n    console.log(steps);\n    // Caching the steps\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count += 2;\n    if (count === 2 * message_limit + 1) {\n      steps[count] = {\n        id: String(count),\n        message: 'Thank You for chatting with us. Your conversation has ended.',\n        end: true\n      };\n    }\n    ;\n  }\n  localStorage.setItem(\"steps\", JSON.stringify(steps));\n  console.log(steps);\n  var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  console.log(storedUserNames);\n  // steps[0].message = 'Hi'\n  // steps[3].message = '{previousValue} ';\n  // // console.log(steps[3].message);\n\n  // All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a'\n  };\n\n  // all available config props\n  const config = {\n    width: \"400px\",\n    height: \"500px\",\n    floating: true\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(ChatBot, {\n          steps: steps,\n          ...config\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = ChatbotApp;\nvar _c;\n$RefreshReg$(_c, \"ChatbotApp\");","map":{"version":3,"names":["React","ChatBot","Segment","ThemeProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","response","userInput","spawn","require","AIModelOutput","stdout","on","data","console","log","stderr","code","ChatbotApp","message_limit","count","steps","Array","id","message","trigger","String","user","end","localStorage","setItem","JSON","stringify","storedUserNames","parse","getItem","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","config","width","height","floating","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js"],"sourcesContent":["import React from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\n\n\n\n// Connecting with AI Model\nfunction response(userInput){\n\n    // Accessing the Model through python file\n    const { spawn } = require('child_process');\n    const AIModelOutput = spawn('python',['my-app/APIExampleChatStream.py',userInput]);\n\n    // AI Model Output\n    AIModelOutput.stdout.on('data',(data) =>{\n      console.log(data);\n    });\n\n    //Error Handling\n    AIModelOutput.stderr.on('data', (data) =>{\n      console.log(data);\n    });\n\n    //Lost Connection with server\n    AIModelOutput.on('data', (code) =>{\n      console.log(`Lost Connection, please try again later!!! ${code}`)\n    }); \n\n}\n\n\n\n// React-ChatBot-UI\nexport default function ChatbotApp(){\n\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2*message_limit+1);\n\n\n\n  steps[0] = {\n    id:'Greet',\n    message:'Hello, Welcome to our platform. How Can I help you?',\n    trigger:String(count),\n  }\n\n  // Caching the steps\n\n  while(count<2*message_limit+1){\n    \n    steps[count] = {\n      id:String(count),\n      user:true,\n      trigger:String(count+1),\n    };\n\n    steps[count+1] = {\n      id:String(count+1),\n      message: 'Hi I am bot '+'{previousValue}',\n      trigger:String(count+2),\n    };\n    console.log(steps);\n    // Caching the steps\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count +=2;\n\n    if(count===2*message_limit+1){\n      steps[count] = {\n        id:String(count),\n        message:'Thank You for chatting with us. Your conversation has ended.',\n        end:true\n      };\n    };\n    \n  }\n  localStorage.setItem(\"steps\", JSON.stringify(steps));\n  console.log(steps);\n  var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  console.log(storedUserNames);\n  // steps[0].message = 'Hi'\n  // steps[3].message = '{previousValue} ';\n  // // console.log(steps[3].message);\n\n\n// All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a',\n  };\n\n\n// all available config props\n  const config ={\n    width: \"400px\",\n    height: \"500px\",\n    floating: true,\n  };\n\n  return ( \n  <>\n    <Segment >\n      <ThemeProvider theme={theme}>\n        <ChatBot \n        steps={steps}\n        {...config}\n        />\n      </ThemeProvider>\n    </Segment>\n  </>\n);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}