{"ast":null,"code":"var _jsxFileName = \"/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js\";\nimport React, { useState } from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  spawn\n} = require('child_process');\nlet {\n  PythonShell\n} = require('python-shell');\nfunction runPy(userinput) {\n  return new Promise(async function (resolve, reject) {\n    let options = {\n      mode: 'text',\n      pythonOptions: ['-u'],\n      scriptPath: 'my-app/APIExampleChatStream.py',\n      //Path to your script\n      args: [JSON.stringify(userinput)] //Approach to send JSON as when I tried 'json' in mode I was getting error.\n    };\n\n    await PythonShell.run('my-app/APIExampleChatStream.py', options, function (err, results) {\n      //On 'results' we get list of strings of all print done in your py scripts sequentially. \n      if (err) throw err;\n      console.log('results: ');\n      for (let i of results) {\n        console.log(i, \"---->\", typeof i);\n      }\n      resolve(results[1]); //I returned only JSON(Stringified) out of all string I got from py script\n    });\n  });\n}\n\nfunction response() {\n  return new Promise(async function (resolve, reject) {\n    let r = await runPy(userinput);\n    var data = JSON.parse(JSON.stringify(r.toString()));\n    console.log(data, \"Done...!@\"); //Approach to parse string to JSON.\n    return data;\n  });\n}\n\n// // Connecting with AI Model\n// function response(userInput){\n\n//     // Accessing the Model through python file\n//     const AIModelOutput = spawn('python',['my-app/APIExampleChatStream.py',userInput]);\n\n//     // AI Model Output\n//     AIModelOutput.stdout.on('data',(data) =>{\n//       return data;\n//       // console.log(data);\n//     });\n\n//     //Error Handling\n//     AIModelOutput.stderr.on('data', (data) =>{\n//       console.log(data);\n//     });\n\n//     //Lost Connection with server\n//     AIModelOutput.on('data', (code) =>{\n//       console.log(`Lost Connection, please try again later!!! ${code}`)\n//     }); \n\n// }\n\n// React-ChatBot-UI\nexport default function ChatbotApp() {\n  // const [myArray, setMyArray] = useState([]);\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2 * message_limit + 1);\n  var messageArray = [];\n  steps[0] = {\n    id: 'Greet',\n    message: 'Hello, Welcome to our platform. How Can I help you?',\n    trigger: String(count)\n  };\n\n  // Caching the steps\n\n  while (count < 2 * message_limit + 1) {\n    // var Message = 'Hi ' + '{previousValue}';\n    var Message = response('{previousValue}');\n    // f('{previousValue}',[]);\n    steps[count] = {\n      id: String(count),\n      user: true,\n      trigger: String(count + 1)\n    };\n    steps[count + 1] = {\n      id: String(count + 1),\n      message: Message,\n      trigger: String(count + 2)\n    };\n\n    // var step = steps.slice(0,count+1);\n    // setMyArray( myArray=>[...myArray,0]);\n    // console.log(myArray);\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count += 2;\n    if (count === 2 * message_limit + 1) {\n      steps[count] = {\n        id: String(count),\n        message: 'Thank You for chatting with us. Your conversation has ended.',\n        end: true\n      };\n    }\n    ;\n  }\n  // localStorage.setItem(\"steps\", JSON.stringify(steps));\n  // console.log(steps);\n  // console.log(messageArray);\n  // var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  // console.log(storedUserNames);\n\n  // All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a'\n  };\n\n  // all available config props\n  const config = {\n    width: \"400px\",\n    height: \"500px\",\n    floating: true\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Segment, {\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(ChatBot, {\n          headerTitle: \"Speech Recognition\",\n          recognitionEnable: true,\n          headerTitle: \"Speech Synthesis\",\n          speechSynthesis: {\n            enable: true,\n            lang: 'en'\n          },\n          steps: steps,\n          ...config\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = ChatbotApp;\nvar _c;\n$RefreshReg$(_c, \"ChatbotApp\");","map":{"version":3,"names":["React","useState","ChatBot","Segment","ThemeProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","spawn","require","PythonShell","runPy","userinput","Promise","resolve","reject","options","mode","pythonOptions","scriptPath","args","JSON","stringify","run","err","results","console","log","i","response","r","data","parse","toString","ChatbotApp","message_limit","count","steps","Array","messageArray","id","message","trigger","String","Message","user","end","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","config","width","height","floating","children","headerTitle","recognitionEnable","speechSynthesis","enable","lang","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stitaprajnapanda/Documents/my-app 3/src/pages/chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ChatBot from 'react-simple-chatbot';\nimport { Segment } from 'semantic-ui-react';\nimport { ThemeProvider } from 'styled-components';\nconst { spawn } = require('child_process');\nlet {PythonShell} = require('python-shell');\n\n\nfunction runPy(userinput){\n  return new Promise(async function(resolve, reject){\n        let options = {\n        mode: 'text',\n        pythonOptions: ['-u'],\n        scriptPath: 'my-app/APIExampleChatStream.py',//Path to your script\n        args: [JSON.stringify(userinput)]//Approach to send JSON as when I tried 'json' in mode I was getting error.\n       };\n\n        await PythonShell.run('my-app/APIExampleChatStream.py', options, function (err, results) {\n        //On 'results' we get list of strings of all print done in your py scripts sequentially. \n        if (err) throw err;\n        console.log('results: ');\n        for(let i of results){\n              console.log(i, \"---->\", typeof i)\n        }\n    resolve(results[1])//I returned only JSON(Stringified) out of all string I got from py script\n   });\n })\n} \n\nfunction response(){\n  return new Promise(async function(resolve, reject){\n      let r =  await runPy(userinput)\n      var data = JSON.parse(JSON.stringify(r.toString()))\n      console.log(data, \"Done...!@\")//Approach to parse string to JSON.\n      return data\n  })\n}\n\n// // Connecting with AI Model\n// function response(userInput){\n\n//     // Accessing the Model through python file\n//     const AIModelOutput = spawn('python',['my-app/APIExampleChatStream.py',userInput]);\n\n//     // AI Model Output\n//     AIModelOutput.stdout.on('data',(data) =>{\n//       return data;\n//       // console.log(data);\n//     });\n\n//     //Error Handling\n//     AIModelOutput.stderr.on('data', (data) =>{\n//       console.log(data);\n//     });\n\n//     //Lost Connection with server\n//     AIModelOutput.on('data', (code) =>{\n//       console.log(`Lost Connection, please try again later!!! ${code}`)\n//     }); \n\n// }\n\n\n\n// React-ChatBot-UI\nexport default function ChatbotApp(){\n  // const [myArray, setMyArray] = useState([]);\n  var message_limit = 25; //user can only send max 25 messages\n  var count = 1;\n  var steps = new Array(2*message_limit+1);\n  var messageArray = []\n\n\n  steps[0] = {\n    id:'Greet',\n    message:'Hello, Welcome to our platform. How Can I help you?',\n    trigger:String(count),\n  }\n\n  // Caching the steps\n\n  while(count<2*message_limit+1){\n    // var Message = 'Hi ' + '{previousValue}';\n    var Message = response('{previousValue}');\n    // f('{previousValue}',[]);\n    steps[count] = {\n      id:String(count),\n      user:true,\n      trigger:String(count+1),\n    };\n\n    steps[count+1] = {\n      id:String(count+1),\n      message: Message,\n      trigger:String(count+2),\n    };\n\n    // var step = steps.slice(0,count+1);\n    // setMyArray( myArray=>[...myArray,0]);\n    // console.log(myArray);\n    // var Message = steps[count+1].message = response('{previousValue}');\n    count +=2;\n\n    if(count===2*message_limit+1){\n      steps[count] = {\n        id:String(count),\n        message:'Thank You for chatting with us. Your conversation has ended.',\n        end:true\n      };\n    };\n  \n  }\n  // localStorage.setItem(\"steps\", JSON.stringify(steps));\n  // console.log(steps);\n  // console.log(messageArray);\n  // var storedUserNames = JSON.parse(localStorage.getItem(\"database\"));\n  // console.log(storedUserNames);\n  \n  \n\n// All possible custom themes \n  const theme = {\n    background: '#f5f8fb',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#e35869',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#e35869',\n    botFontColor: '#fff',\n    userBubbleColor: '#fff',\n    userFontColor: '#4a4a4a',\n  };\n\n\n// all available config props\n  const config ={\n    width: \"400px\",\n    height: \"500px\",\n    floating: true,\n  };\n\n  return ( \n  <>\n    <Segment >\n      <ThemeProvider theme={theme}>\n        <ChatBot \n        headerTitle=\"Speech Recognition\"\n        recognitionEnable={true}\n        headerTitle=\"Speech Synthesis\"\n        speechSynthesis={{ enable: true, lang: 'en' }}\n        steps={steps}\n        {...config}\n        />\n      </ThemeProvider>\n    </Segment>\n  </>\n);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}